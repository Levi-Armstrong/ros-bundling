#!/usr/bin/env python

import os
import re
import tarfile

from catkin_pkg.package import parse_package_string
from debian.changelog import Changelog
from rosdep_lite import resolve_deps, get_rosdep_data, get_rosdeps
from rosdistro import get_distribution, get_cached_distribution, get_index
from rosdistro.distribution_cache_generator import generate_distribution_cache
from rosinstall_generator.generator import generate_rosinstall_for_repos
from rosinstall_generator.distro import get_recursive_dependencies, generate_rosinstall
from shutil import copytree, rmtree
from subprocess import Popen, PIPE, STDOUT


ROSDISTRO_INDEX_URL = 'https://github.com/mikepurvis/rosdistro/raw/%s/index.yaml'
ROSDISTRO_NAME = 'indigo'
UBUNTU_DISTRO = 'trusty'
package_names = [os.environ.get('ROSDISTRO_PACKAGE', 'desktop_full')]
tarballs = []
control_file_template = """Source: roscon-base
Maintainer: Mike Purvis <mpurvis@clearpath.ai>
Section: devel
Priority: extra
Standards-Version: 3.9.5
Build-Depends: {system_deps}
Homepage: http://clearpathrobotics.com

Package: roscon-base
Architecture: amd64
Depends: {system_deps}
Description: Bundle of ROS base."""


print ' - parsing debian changelog.'
with open('debian/changelog') as f:
    changelog = Changelog(file=f, max_blocks=1)
print "   -> %s (%s)" % (changelog.get_package(), changelog.full_version)

print ' - fetching rosdistro index.'
rosdistro_index = get_index(ROSDISTRO_INDEX_URL % changelog.upstream_version)

print ' - updating cached rosdistro distribution.'
print "   -> Using [%s] from %s" % (ROSDISTRO_NAME, ROSDISTRO_INDEX_URL % changelog.upstream_version)
cache = generate_distribution_cache(rosdistro_index, ROSDISTRO_NAME)
cached_distro = get_cached_distribution(rosdistro_index, ROSDISTRO_NAME, cache=cache)

print ' - resolving distribution dependencies.'
package_names += get_recursive_dependencies(cached_distro, package_names)  # , source=False)
print '   -> bundle to contain %d packages' % len(package_names)

print ' - resolving system dependencies.'
parsed_packages = [parse_package_string(cached_distro.get_release_package_xml(p)) for p in package_names]
system_deps = resolve_deps(get_rosdep_data(UBUNTU_DISTRO), get_rosdeps(parsed_packages))
print '   -> bundle to have %d dependencies' % len(system_deps)

print ' - generating debian metadata directory.'
if os.path.exists('build/debian'):
    rmtree('build/debian')
copytree('debian', 'build/debian')
with open('build/debian/control', 'w') as f:
    f.write(control_file_template.format(system_deps=', '.join(system_deps)))
with open('build/debian/packages.txt', 'w') as f:
    f.write(' '.join(package_names))
with open('build/debian/source/format', 'w') as f:
    f.write('3.0 (quilt)')

print ' - creating debian metadata tarball.'
debian_tarball = '%s_%s.debian.tar.gz' % (changelog.get_package(), changelog.full_version)
with tarfile.open(os.path.join('build', debian_tarball), "w:gz") as f:
    f.add('build/debian', 'debian')
tarballs.append(debian_tarball)

print ' - creating empty upstream tarball.'
upstream_tarball = '%s_%s.orig.tar.gz' % (changelog.get_package(), changelog.upstream_version)
with tarfile.open(os.path.join('build', upstream_tarball), "w:gz"):
    pass
tarballs.append(upstream_tarball)

print ' - generating download list.'
rosinstall_data = generate_rosinstall(cached_distro, package_names, flat=True, tar=True)
aria2_input = []
for rosinstall_item in rosinstall_data:
    tarball_version = re.sub("[./_]", "-", rosinstall_item['tar']['version'])
    tarball = '%s_%s.orig-%s.tar.gz' % (changelog.get_package(), changelog.upstream_version, tarball_version)
    tarballs.append(tarball)
    aria2_input.extend((rosinstall_item['tar']['uri'], '  out=%s' % tarball))

print ' - downloading tarballs.'
aria2_cmd = ['aria2c', '--summary-interval=0', '-j16', '--auto-file-renaming=false', \
             '--allow-overwrite=true', '--conditional-get=true', '-i', '-']
with open('build/aria2.log', 'w') as f:
    Popen(aria2_cmd, stdout=f, stdin=PIPE, stderr=STDOUT, cwd='build').communicate(input='\n'.join(aria2_input))

print ' - creating sourcedeb.'
dpkg_cmd = ['dpkg-source', '-cdebian/control', '-ldebian/changelog', '--format=3.0 (custom)',
            '--target-format=3.0 (quilt)', '-b', '/'] + tarballs
with open('build/dpkg-source.log', 'w') as f:
    Popen(dpkg_cmd, stdout=f, stdin=PIPE, stderr=STDOUT, cwd='build').communicate()
